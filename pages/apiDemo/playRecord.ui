<template>
    <ui-page>
      <ui-view class="container">
        <ui-view class="page-body">
          <ui-view class="page-section">
            <div ui:if="{{recording === false && playing === false && hasRecord === false}}">
              <ui-view class="page-body-time">
                <ui-text class="time-big">{{formatedRecordTime}}</ui-text>
              </ui-view>
              <ui-view class="page-body-buttons">
                <ui-view class="page-body-button"></ui-view>
                <ui-view class="page-body-button" bindclick="startRecord">
                  <ui-image src="{{ require('#/images/record.png') }}"></ui-image>
                </ui-view>
                <ui-view class="page-body-button"></ui-view>
              </ui-view>
            </div>

            <div ui:if="{{recording === true}}">
              <ui-view class="page-body-time">
                <ui-text class="time-big">{{formatedRecordTime}}</ui-text>
              </ui-view>
              <ui-view class="page-body-buttons">
                <ui-view class="page-body-button"></ui-view>
                <ui-view class="page-body-button" bindclick="stopRecord">
                  <ui-view class="button-stop-record"></ui-view>
                </ui-view>
                <ui-view class="page-body-button"></ui-view>
              </ui-view>
            </div>

            <div ui:if="{{hasRecord === true && playing === false}}">
              <ui-view class="page-body-time">
                <ui-text class="time-big">{{formatedPlayTime}}</ui-text>
                <ui-text class="time-small">{{formatedRecordTime}}</ui-text>
              </ui-view>
              <ui-view class="page-body-buttons">
                <ui-view class="page-body-button"></ui-view>
                <ui-view class="page-body-button" bindclick="playVoice">
                  <ui-image src="{{ require('#/images/play.png') }}"></ui-image>
                </ui-view>
                <ui-view class="page-body-button" bindclick="clear">
                  <ui-image src="{{ require('#/images/trash.png') }}"></ui-image>
                </ui-view>
              </ui-view>
            </div>

            <div ui:if="{{hasRecord === true && playing === true}}">
              <ui-view class="page-body-time">
                <ui-text class="time-big">{{formatedPlayTime}}</ui-text>
                <ui-text class="time-small">{{formatedRecordTime}}</ui-text>
              </ui-view>
              <ui-view class="page-body-buttons">
                <ui-view class="page-body-button" bindclick="stopVoice">
                  <ui-image src="{{ require('#/images/stop.png') }}"></ui-image>
                </ui-view>
                <ui-view class="page-body-button" bindclick="clear">
                  <ui-image src="{{ require('#/images/trash.png') }}"></ui-image>
                </ui-view>
              </ui-view>
            </div>
          </ui-view>
        </ui-view>
      </ui-view>

    </ui-page>
  </template>


<script>
// import util from '#/static/utils/util'

var util = require('#/static/utils/util')
var playTimeInterval
var recordTimeInterval
export default {
  config: {
    "navigationBarTitleText": "录音与播放"
  },
  data () {
    return {
      recording: false,
      playing: false,
      hasRecord: false,
      recordTime: 0,
      playTime: 0,
      formatedRecordTime: '00:00:00',
      formatedPlayTime: '00:00:00',
      tempFilePath: ''
    }
  },
  methods: {
    onHide () {
      if (this.$data.playing) {
        this.stopVoice()
      } else if (this.$data.recording) {
        this.stopRecordUnexpectedly()
      }
    },
    startRecord () {
      this.setData({ recording: true })

      var that = this
      recordTimeInterval = setInterval(function () {
        var recordTime = that.$data.recordTime += 1
        that.setData({
          formatedRecordTime: util.formatTime(that.$data.recordTime),
          recordTime: recordTime
        })
      }, 1000)
      ui.startRecord({
        success: function (res) {
          that.setData({
            hasRecord: true,
            tempFilePath: res.tempFilePath,
            formatedPlayTime: util.formatTime(that.$data.playTime)
          })
        },
        complete: function () {
          that.setData({ recording: false })
          clearInterval(recordTimeInterval)
        }
      })
    },
    stopRecord () {
      ui.stopRecord()
    },
    stopRecordUnexpectedly () {
      var that = this
      ui.stopRecord({
        success: function () {
          clearInterval(recordTimeInterval)
          that.setData({
            recording: false,
            hasRecord: false,
            recordTime: 0,
            formatedRecordTime: util.formatTime(0)
          })
        }
      })
    },
    playVoice () {
      var that = this
      playTimeInterval = setInterval(function () {
        var playTime = that.$data.playTime + 1
        that.setData({
          playing: true,
          formatedPlayTime: util.formatTime(playTime),
          playTime: playTime
        })
      }, 1000)
      ui.playVoice({
        filePath: this.$data.tempFilePath,
        success: function () {
          clearInterval(playTimeInterval)
          var playTime = 0
          that.setData({
            playing: false,
            formatedPlayTime: util.formatTime(playTime),
            playTime: playTime
          })
        }
      })
    },
    pauseVoice () {
      clearInterval(playTimeInterval)
      ui.pauseVoice()
      this.setData({
        playing: false
      })
    },
    stopVoice () {
      clearInterval(playTimeInterval)
      this.setData({
        playing: false,
        formatedPlayTime: util.formatTime(0),
        playTime: 0
      })
      ui.stopVoice()
    },
    clear () {
      clearInterval(playTimeInterval)
      ui.stopVoice()
      this.setData({
        playing: false,
        hasRecord: false,
        tempFilePath: '',
        formatedRecordTime: util.formatTime(0),
        recordTime: 0,
        playTime: 0
      })
    }
  }
}

</script>

<style lang="less">
  img {
  width: 80px;
  height: 80px;
}

.page-body-wrapper {
  justify-content: space-between;
  flex-grow: 1;
  margin-bottom: 300rpx;
}

.page-body-time {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.time-big {
  font-size: 30px;
  margin: 20rpx;
}

.time-small {
  font-size: 30rpx;
}

.page-body-buttons {
  margin-top: 60rpx;
  display: flex;
  justify-content: space-around;
}

// .page-body-button {
//   width: 250rpx;
//   text-align: center;
// }

.button-stop-record {
  width: 110rpx;
  height: 110rpx;
  border: 20rpx solid #fff;
  background-color: #f55c23;
  border-radius: 130rpx;
  margin: 0 auto;
}
</style>