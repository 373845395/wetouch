<template>
  <ui-page>
      <ui-image
      src="http://images.uileader.com/20171117/a1fa37d0-fbd7-4316-be27-1136a97b459b.jpg"
      height="{{ imgHeight }}"
      load-effect="fade"
      ></ui-image>
    <ui-scroll-view
    scroll-y
    height="{{height - imgHeight}}"
    pull-down="{{ pullDown }}"
    pull-up="{{ pullUp }}"
    >
    <ui-view slot="pull-down" class="pull-down-content" ui:if="{{proportion}}">
        <ui-view class="img-layer" ui:if="{{proportion < 1}}">
          <ui-view class="img_content" style="{{{ height : proportion * 100+'px' }}}"></ui-view>
        </ui-view>

        <ui-view class="img-layer" ui:else>
          <ui-view class="mt-ready" ui:if="{{state === 2}}"></ui-view>
          <ui-view class="mt-loading" ui:show="{{state === 3 || state === 4}}"></ui-view>
        </ui-view>
      </ui-view>
      <ui-view class="content_list">
        <ui-view ui:for="{{ items }}" class="{{{'grey-bg': index % 2 == 0}}}">
          {{ item }}
        </ui-view>
      </ui-view>
    </ui-scroll-view>
  </ui-page>
</template>

<script>
  export default {
  config: {
    navigationBarTitleText: "自定义下拉与上拉",
    disableScroll:true,
    navigationBarBorderColor: "rgba(231, 231, 231, 0.6)",
    navigationBarBackgroundColor:"#FFFFFF",
    navigationBarTextStyle:"black",
    statusBarColor:"black"
  },
  data () {
    return {
      items: [],
      bottom: 30,
      top: 0,
      proportion: 0,
      // 下拉刷新（初始状态）
      state: 1,
      showLoading: false,
      imgSrc: require('#/images/mt_01.png'),
      height: ui.DEFAULT_CONTENT_HEIGHT,
      imgHeight: parseInt(ui.WIN_WIDTH / 1125 * 628),
      pullDown: {
        distance: 60,
        onBegin: this.handleBegin,
        onActive: this.handleActive,
        onAfter: this.handleAfter
      },
      pullUp: {
        distance: 50,
        onBegin: () => {},
        onActive: this.handleActive,
        onAfter: this.handlePullUpAfter
      }
    }
  },
  methods: {
    handleLoadMore () {
      window.setTimeout(() => {
        for (let i = this.bottom + 1; i <= this.bottom + 10; i++) {
          this.items.push(`列表项目${i}`)
        }
        this.bottom += 10
      }, 1500)
    },
    handleBegin ({ distance, direction }) {
      this.proportion = distance / 60
      // 拉满60px
      if (this.proportion >= 1) {
        if (this.state === 1 && direction === 'down') {
          // 释放刷新
          this.state = 2

          // 300ms吉祥物翻转时间
          window.setTimeout(() => {
            // 刷新中...
            this.state = 3
          }, 300)
        }
      } else {
        this.state = 1
      }
    },
    handleActive () {
      return ui.request({
        // promise设置为true，让请求返回promise，这样就可以接管请求
        // 请求结束后页面自动回弹
        promise: true,
        url: '/touchui-backstage/listInfo.do?state=1',
        success: (response) => {
          // 刷新成功...
          this.state = 4
        },
        fail: (err) => {
        }
      })
    },
    handleAfter (flag) {
      this.proportion = 0
      this.state = 1
      if (flag) {
        for (let i = this.top - 1; i >= this.top - 10; i--) {
          this.items.unshift(`列表项目${i}`)
        }
        this.top -= 10
      }
    },
    handlePullUpAfter (flag) {
      if (flag) {
        // 模拟数据，这里应该从handleActive 里从接口拿到数据
        for (let i = this.bottom + 1; i <= this.bottom + 10; i++) {
          this.items.push(`列表项目${i}`)
        }
        this.bottom += 10
      }
    }
  },
  mounted () {
    for (let i = 1; i <= this.bottom; i++) {
      this.items.push(`列表项目${i}`)
    }
  }
}

</script>

<style lang="less">
  .pull-down-content {
  height: 60px;
  margin-top: -60px;
  display: flex;
  align-items:flex-end;
  padding-bottom: 8px;
}


.img-layer {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  .img_content{
    width: 82px;
    background: url('~images/mt_run.png') no-repeat;
    background-position: -2px center;
    background-size: 1149px 100%;
    zoom: 0.5;
  }
}

.mt-ready {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 82px;
  height: 107px;
  background: url('~images/mt_run.png') no-repeat;
  animation: mt-ready steps(5, end) 300ms;
  zoom: 0.5;
}

.mt-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 82px;
  height: 107px;
  background: url('~images/mt_run.png') no-repeat;
  animation: mt-loading steps(1, end) 300ms infinite;
  zoom: 0.5;
} 

@keyframes mt-ready {
  
  100% {
    background-position: -410px center;
  }
}

@keyframes mt-loading {
  0%{
    background-position: -495px center;
  }

  20%{
    background-position: -576px center;
  }

  40%{
    background-position: -658px center;
  }
  50%{
    background-position: -740px center;
  }
  60%{
    background-position: -823px center;
  }
  80%{
    background-position: -905px center;
  }
  90%{
    background-position: -986px center;
  }

  100% {
    background-position: -1068px center;
  }
}
</style>