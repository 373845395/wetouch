
<template>
  <ui-page page-load="{{ pageLoad }}" style="background-color: #1C1F27">
    <ui-view class="container">
        <ui-view class="content tab-content" wx:if="{{tabName == 'ts'}}">
            <ui-view class="stock">
                <ui-text>股票：{{stock}} - {{code}}</ui-text>
                <ui-text>时间：{{time}}</ui-text>
                <ui-text>昨收：{{yc}}</ui-text>
            </ui-view>
            <ui-canvas canvas-id="time-sharing" width="{{windowWidth}}" height="200">
            </ui-canvas>
            <ui-canvas canvas-id="time-sharing-b" width="{{windowWidth}}" height="80">
            </ui-canvas>
            <ui-view class="btn-area">
                <ui-button class="mybutton" full-width="false"  bindtap="reset">重置</ui-button>
                <ui-button  class="mybutton" full-width="false" bindtap="dynamic">模拟动态变化</ui-button>

                <ui-picker mode="selector" value="{{timerIndex}}" range="{{timerArray}}" bindchange="bindTimeChange">
                    <ui-view class="picker">
                        动态变更频率: {{timerArray[timerIndex]}}
                    </ui-view>
                </ui-picker>
              
                <ui-text class="p ui-text">data index: {{dataIndex}}</ui-text>
                <ui-view class="p ui-text">ts1 render time: {{ts1RenderTime}}ms</ui-view>
                <ui-view class="p ui-text">ts2 render time: {{ts2RenderTime}}ms</ui-view>
                <ui-text class="p ui-text">本demo的模拟数据前16条是未开盘的数据，实际情况请根据各业务接口变化，metaData1()和metaData2()方法同理。</ui-text>
            </ui-view>
        </ui-view>

    <!--
        <ui-view class="content tab-content" wx:if="{{tabName == 'ts5'}}">
            <ui-view class="stock">
                <ui-text>股票名称：{{stock}} - {{code}}</ui-text>
                <ui-text>时间：{{time}}</ui-text>
                <ui-text>昨收：{{yc}}</ui-text>
            </ui-view>
            <ui-canvas canvas-id="time-sharing-5day" class="stage" style="width: 100%; height: 200px">
            </ui-canvas>
            <ui-canvas canvas-id="time-sharing-5day-b" class="stage" style="width: 100%; height: 80px">
            </ui-canvas>
            <ui-view class="btn-area">
                <ui-text class="p ui-text">ts1 render time: {{ts1RenderTime}}ms</ui-text>
                <ui-text class="p ui-text">ts2 render time: {{ts2RenderTime}}ms</ui-text>
                <ui-text class="p ui-text">5日图相当于5天的分时图连接起来，所以其实还是分时图,只有时间轴上有区别。</ui-text>
            </ui-view>
        </ui-view>
    </ui-view>

    -->
  </ui-page>
</template>


<script>

import storage from '#/static/lib/storage'
import ts from '#/static/lib/wxChart/time-sharing'


var ts1, ts2;     //分时
var tsd51, tsd52; //五日
var getOptionTimeSharing1 = function (type, width) {
    return {
        name: type || 'time-sharing',
        width: width || 'auto',
        height: 400,
        axis: {
            row: 4,
            col: 4,
            paddingTop: 10,
            paddingBottom: 10,
            paddingLeft: 0,
            paddingRight: 0,
            color: '#cdcdcd'
        },
        xAxis: {
            data: []
        },
        yAxis: [
            {
                type: 'line',
                lineColor: '#2F6098',
                background: 'rgba(53,125,222,0.1)',
                /*background: function () {  //渐变背景在IOS上会影响均线颜色，这个应该是小程序canvas的bug
                    return ['rgba(53,125,222,0.3)', 'rgba(0,0,0,0)'];
                },*/
                data: []
            },
            {
                type: 'line',
                lineColor: '#A96F3E',
                data: []
            }
        ],
        callback: function (time) {
          window.__tsVm.ts1RenderTime = time
        }
    };
};
var getOptionTimeSharing2 = function (type, width) {
    return {
        name: type || 'time-sharing-b',
        width: width || 'auto',
        height: 160,
        axis: {
            row: 2,
            col: 4,
            showEdg: true,
            showX: true,
            showY: true,
            paddingTop: 10,
            paddingBottom: 24,
            paddingLeft: 0,
            paddingRight: 0,
            color: '#cdcdcd'
        },
        xAxis: {
            times: ['09:30', '15:00'],
            data: []
        },
        yAxis: [
            {
                type: 'bar',
                color: [],
                data: [],
                showMax: true
            }
        ],
        callback: function (time) {
          window.__tsVm.ts2RenderTime = time
        }
    }
};
var timer = null;

export default {
  config: {
    navigationBarTitleText: '详情',
    navigationBarBackgroundColor:'#252924',
    navigationBarTextStyle:'white',
    navigationBarBorderColor:'#252924'
  },
  data () {
    return {
      windowWidth: ui.WIN_WIDTH,
      tabName: '',
      ts: {},
      ts5: {},
      stock: '',
      code: '',
      time: '',
      yc: '',
      dataIndex: 0,
      ts1RenderTime: 0,
      ts2RenderTime: 0,
      timerIndex: 0,
      timerArray: ['50ms', '100ms', '200ms', '500ms', '1000ms'],
      pageLoad: {
        trigger: 'once',
        handle:() =>{
        window.__tsVm = this
        var tsData = storage.getTsData();
        var ts5Data = storage.getTs5Data();
        this.dataIndex = 0
        this.ts = tsData
        this.ts5 = ts5Data
        var data = this['ts'];
        this.tabName = 'ts'
        this.stock = data.name
        this.code = data.code
        this.time = data.info.time
        this.yc = data.info.yc
          this.$nextTick(() => {
            this['init-ts']();
          })
        }
      }
    }
  },
  mounted () {

    // this.tabChart({
    //     target: {
    //         dataset: {
    //             type: 'ts'
    //         }
    //     }
    // });
    // setTimeout(() => {
    //   this['init-ts']();
    // }, 4000)

  },
  destroyed () {
    clearInterval(timer);
  },
  methods: {
    tabChart: function (e) {
        this.clearTimer();
        var type = e.target.dataset.type;
        var data = this[type];
        this.setData({
            tabName: type,
            stock: data.name,
            code: data.code,
            time: data.info.time,
            yc: data.info.yc
        });
        this['init-' + type]();
    },
    'init-ts': function () {
        var data = this.ts;
        ts1 = ts('time-sharing').init(getOptionTimeSharing1());
        this.renderTs1(data);
        ts2 = ts('time-sharing-b').init(getOptionTimeSharing2());
        this.renderTs2(data);
    },
    'init-ts5': function () {
        // var data = this.ts5;
        // tsd51 = ts('time-sharing-5day').init(getOptionTimeSharing1('time-sharing-5day'));
        // tsd52 = ts('time-sharing-5day-b').init(getOptionTimeSharing2('time-sharing-5day'));
        // tsd51.metaData1(data, getOptionTimeSharing1('time-sharing-5day'));
        // tsd51.draw();
        // tsd52.metaData2(data, getOptionTimeSharing2('time-sharing-5day'));
        // tsd52.draw();
    },
    renderTs1: function (data) {
        ts1.metaData1(data, getOptionTimeSharing1());
        ts1.draw();
    },
    renderTs2: function (data) {
        ts2.metaData2(data, getOptionTimeSharing2());
        ts2.draw();
    },
    clearTimer: function () {
        clearInterval(timer);
        this.setData({
            dataIndex: 0
        });
    },
    reset: function () {
        this.clearTimer();

        var data = storage.getTsData();
        this.renderTs1(data);
        this.renderTs2(data);
    },
    dynamic: function () {
        var that = this;
        var data = storage.getTsData();
        var origin = data.data.slice(0);
        var index = 0;
        var times = [50, 100, 200, 500, 1000];
        clearInterval(timer);
        timer = setInterval(function () {
            index += 1;
            if(index > 241 + 16){
                clearInterval(timer);
                return;
            }
            data.data = origin.slice(0, index);
            that.renderTs1(data);
            that.renderTs2(data);
            that.setData({
                dataIndex: index
            });
        }, times[this.timerIndex]);
    },
    bindTimeChange: function (e) {
        var index = e;
        this.setData({
            timerIndex: index === '' ? 4 : index
        });
        this.dynamic();
    }
  }
}

</script>

<style lang="less">
  div {
    color: white;
  }

  .mybutton {
    border: 1px solid #19be6b;background-color: #19be6b;  color:white;
  }

</style>
